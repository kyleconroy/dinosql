// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package querytest

import (
	"context"
	"database/sql"
)

const selectUserByID = `-- name: SelectUserByID :many
SELECT first_name from
users where (? = id OR ? = 0)
`

type SelectUserByIDParams struct {
	ID int32
}

func (q *Queries) SelectUserByID(ctx context.Context, arg SelectUserByIDParams, aq ...AdditionalQuery) ([]sql.NullString, error) {
	query := selectUserByID
	queryParams := []interface{}{arg.ID, arg.ID}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var first_name sql.NullString
		if err := rows.Scan(&first_name); err != nil {
			return nil, err
		}
		items = append(items, first_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUserByName = `-- name: SelectUserByName :many
SELECT first_name
FROM users
WHERE first_name = ?
   OR last_name = ?
`

type SelectUserByNameParams struct {
	Name sql.NullString
}

func (q *Queries) SelectUserByName(ctx context.Context, arg SelectUserByNameParams, aq ...AdditionalQuery) ([]sql.NullString, error) {
	query := selectUserByName
	queryParams := []interface{}{arg.Name, arg.Name}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var first_name sql.NullString
		if err := rows.Scan(&first_name); err != nil {
			return nil, err
		}
		items = append(items, first_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUserQuestion = `-- name: SelectUserQuestion :many
SELECT first_name from
users where (? = id OR  ? = 0)
`

type SelectUserQuestionParams struct {
	ID      int32
	Column2 interface{}
}

func (q *Queries) SelectUserQuestion(ctx context.Context, arg SelectUserQuestionParams, aq ...AdditionalQuery) ([]sql.NullString, error) {
	query := selectUserQuestion
	queryParams := []interface{}{arg.ID, arg.Column2}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var first_name sql.NullString
		if err := rows.Scan(&first_name); err != nil {
			return nil, err
		}
		items = append(items, first_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
