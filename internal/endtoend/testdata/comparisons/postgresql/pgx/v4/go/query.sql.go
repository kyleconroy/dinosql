// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package querytest

import (
	"context"
)

const alsoNotEqual = `-- name: AlsoNotEqual :many
SELECT count(*) <> 0 FROM bar
`

func (q *Queries) AlsoNotEqual(ctx context.Context, aq ...AdditionalQuery) ([]bool, error) {
	query := alsoNotEqual
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	rows, err := q.db.Query(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []bool
	for rows.Next() {
		var column_1 bool
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const equal = `-- name: Equal :many
SELECT count(*) = 0 FROM bar
`

func (q *Queries) Equal(ctx context.Context, aq ...AdditionalQuery) ([]bool, error) {
	query := equal
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	rows, err := q.db.Query(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []bool
	for rows.Next() {
		var column_1 bool
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const greaterThan = `-- name: GreaterThan :many
SELECT count(*) > 0 FROM bar
`

func (q *Queries) GreaterThan(ctx context.Context, aq ...AdditionalQuery) ([]bool, error) {
	query := greaterThan
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	rows, err := q.db.Query(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []bool
	for rows.Next() {
		var column_1 bool
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const greaterThanOrEqual = `-- name: GreaterThanOrEqual :many
SELECT count(*) >= 0 FROM bar
`

func (q *Queries) GreaterThanOrEqual(ctx context.Context, aq ...AdditionalQuery) ([]bool, error) {
	query := greaterThanOrEqual
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	rows, err := q.db.Query(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []bool
	for rows.Next() {
		var column_1 bool
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const lessThan = `-- name: LessThan :many
SELECT count(*) < 0 FROM bar
`

func (q *Queries) LessThan(ctx context.Context, aq ...AdditionalQuery) ([]bool, error) {
	query := lessThan
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	rows, err := q.db.Query(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []bool
	for rows.Next() {
		var column_1 bool
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const lessThanOrEqual = `-- name: LessThanOrEqual :many
SELECT count(*) <= 0 FROM bar
`

func (q *Queries) LessThanOrEqual(ctx context.Context, aq ...AdditionalQuery) ([]bool, error) {
	query := lessThanOrEqual
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	rows, err := q.db.Query(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []bool
	for rows.Next() {
		var column_1 bool
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const notEqual = `-- name: NotEqual :many
SELECT count(*) != 0 FROM bar
`

func (q *Queries) NotEqual(ctx context.Context, aq ...AdditionalQuery) ([]bool, error) {
	query := notEqual
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	rows, err := q.db.Query(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []bool
	for rows.Next() {
		var column_1 bool
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
