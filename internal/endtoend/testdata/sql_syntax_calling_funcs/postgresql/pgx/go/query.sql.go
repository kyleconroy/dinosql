// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package querytest

import (
	"context"
)

const mixedNotation = `-- name: MixedNotation :one
SELECT concat_lower_or_upper('Hello', 'World', uppercase => true)
`

func (q *Queries) MixedNotation(ctx context.Context) (string, error) {
	ctx, done := q.observer(ctx, "MixedNotation")
	row := q.db.QueryRow(ctx, mixedNotation)
	var concat_lower_or_upper string
	err := row.Scan(&concat_lower_or_upper)
	return concat_lower_or_upper, done(err)
}

const namedAnyOrder = `-- name: NamedAnyOrder :one
SELECT concat_lower_or_upper(a => 'Hello', b => 'World', uppercase => true)
`

func (q *Queries) NamedAnyOrder(ctx context.Context) (string, error) {
	ctx, done := q.observer(ctx, "NamedAnyOrder")
	row := q.db.QueryRow(ctx, namedAnyOrder)
	var concat_lower_or_upper string
	err := row.Scan(&concat_lower_or_upper)
	return concat_lower_or_upper, done(err)
}

const namedNotation = `-- name: NamedNotation :one
SELECT concat_lower_or_upper(a => 'Hello', b => 'World')
`

func (q *Queries) NamedNotation(ctx context.Context) (string, error) {
	ctx, done := q.observer(ctx, "NamedNotation")
	row := q.db.QueryRow(ctx, namedNotation)
	var concat_lower_or_upper string
	err := row.Scan(&concat_lower_or_upper)
	return concat_lower_or_upper, done(err)
}

const namedOtherOrder = `-- name: NamedOtherOrder :one
SELECT concat_lower_or_upper(a => 'Hello', uppercase => true, b => 'World')
`

func (q *Queries) NamedOtherOrder(ctx context.Context) (string, error) {
	ctx, done := q.observer(ctx, "NamedOtherOrder")
	row := q.db.QueryRow(ctx, namedOtherOrder)
	var concat_lower_or_upper string
	err := row.Scan(&concat_lower_or_upper)
	return concat_lower_or_upper, done(err)
}

const positionalNoDefaault = `-- name: PositionalNoDefaault :one
SELECT concat_lower_or_upper('Hello', 'World')
`

func (q *Queries) PositionalNoDefaault(ctx context.Context) (string, error) {
	ctx, done := q.observer(ctx, "PositionalNoDefaault")
	row := q.db.QueryRow(ctx, positionalNoDefaault)
	var concat_lower_or_upper string
	err := row.Scan(&concat_lower_or_upper)
	return concat_lower_or_upper, done(err)
}

const positionalNotation = `-- name: PositionalNotation :one
SELECT concat_lower_or_upper('Hello', 'World', true)
`

func (q *Queries) PositionalNotation(ctx context.Context) (string, error) {
	ctx, done := q.observer(ctx, "PositionalNotation")
	row := q.db.QueryRow(ctx, positionalNotation)
	var concat_lower_or_upper string
	err := row.Scan(&concat_lower_or_upper)
	return concat_lower_or_upper, done(err)
}
