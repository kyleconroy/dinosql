// Code generated by sqlc. DO NOT EDIT.
// source: test.sql

package querytest

import (
	"context"
)

const countFour = `-- name: CountFour :one
SELECT count(1) FROM bar WHERE id > $2 AND phone <> $3  AND name <> $1
`

type CountFourParams struct {
	Name       string
	ID         int32
	PhoneParam string
}

func (q *Queries) CountFour(ctx context.Context, arg CountFourParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countFour, arg.Name, arg.ID, arg.PhoneParam)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countOne = `-- name: CountOne :one
SELECT count(1) FROM bar WHERE id = $2 AND phone < $3 and name <> $1
`

type CountOneParams struct {
	Name       string
	ID         int32
	PhoneParam string
}

func (q *Queries) CountOne(ctx context.Context, arg CountOneParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countOne, arg.Name, arg.ID, arg.PhoneParam)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countThree = `-- name: CountThree :one
SELECT count(1) FROM bar WHERE id > $2 AND name = $1
`

type CountThreeParams struct {
	Name    string
	IDParam int32
}

func (q *Queries) CountThree(ctx context.Context, arg CountThreeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countThree, arg.Name, arg.IDParam)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTwo = `-- name: CountTwo :one
SELECT count(1) FROM bar WHERE id = $2 AND phone < $3 and name <> $1
`

type CountTwoParams struct {
	Name       string
	IDParam    int32
	PhoneParam string
}

func (q *Queries) CountTwo(ctx context.Context, arg CountTwoParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTwo, arg.Name, arg.IDParam, arg.PhoneParam)
	var count int64
	err := row.Scan(&count)
	return count, err
}
