// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package querytest

import (
	"context"
	"database/sql"

	"github.com/jackc/pgconn"
)

const execFoo = `-- name: ExecFoo :exec
INSERT INTO foo (bar) VALUES ("bar")
`

// This function creates a Foo via :exec
func (q *Queries) ExecFoo(ctx context.Context) error {
	ctx, done := q.observer(ctx, "ExecFoo")
	_, err := q.db.Exec(ctx, execFoo)
	return done(err)
}

const execResultFoo = `-- name: ExecResultFoo :execresult
INSERT INTO foo (bar) VALUES ("bar")
`

// This function creates a Foo via :execresult
func (q *Queries) ExecResultFoo(ctx context.Context) (pgconn.CommandTag, error) {
	ctx, done := q.observer(ctx, "ExecResultFoo")
	tag, err := q.db.Exec(ctx, execResultFoo)
	return tag, done(err)
}

const execRowFoo = `-- name: ExecRowFoo :execrows
INSERT INTO foo (bar) VALUES ("bar")
`

// This function creates a Foo via :execrows
func (q *Queries) ExecRowFoo(ctx context.Context) (int64, error) {
	ctx, done := q.observer(ctx, "ExecRowFoo")
	result, err := q.db.Exec(ctx, execRowFoo)
	if err != nil {
		return 0, done(err)
	}
	return result.RowsAffected(), done(nil)
}

const manyFoo = `-- name: ManyFoo :many
SELECT bar FROM foo
`

// This function returns a list of Foos
func (q *Queries) ManyFoo(ctx context.Context) ([]sql.NullString, error) {
	ctx, done := q.observer(ctx, "ManyFoo")
	rows, err := q.db.Query(ctx, manyFoo)
	if err != nil {
		return nil, done(err)
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var bar sql.NullString
		if err := rows.Scan(&bar); err != nil {
			return nil, done(err)
		}
		items = append(items, bar)
	}
	if err := rows.Err(); err != nil {
		return nil, done(err)
	}
	return items, done(nil)
}

const oneFoo = `-- name: OneFoo :one
SELECT bar FROM foo
`

// This function returns one Foo
func (q *Queries) OneFoo(ctx context.Context) (sql.NullString, error) {
	ctx, done := q.observer(ctx, "OneFoo")
	row := q.db.QueryRow(ctx, oneFoo)
	var bar sql.NullString
	err := row.Scan(&bar)
	return bar, done(err)
}
