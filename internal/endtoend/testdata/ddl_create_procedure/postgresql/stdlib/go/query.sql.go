// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package querytest

import (
	"context"
)

const callInsertData = `-- name: CallInsertData :exec
CALL insert_data($1, $2)
`

type CallInsertDataParams struct {
	A int32
	B int32
}

func (q *Queries) CallInsertData(ctx context.Context, arg CallInsertDataParams) error {
	ctx, done := q.observer(ctx, "CallInsertData")
	_, err := q.db.ExecContext(ctx, callInsertData, arg.A, arg.B)
	return done(err)
}

const callInsertDataNamed = `-- name: CallInsertDataNamed :exec
CALL insert_data(b => $1, a => $2)
`

type CallInsertDataNamedParams struct {
	B int32
	A int32
}

func (q *Queries) CallInsertDataNamed(ctx context.Context, arg CallInsertDataNamedParams) error {
	ctx, done := q.observer(ctx, "CallInsertDataNamed")
	_, err := q.db.ExecContext(ctx, callInsertDataNamed, arg.B, arg.A)
	return done(err)
}

const callInsertDataNoArgs = `-- name: CallInsertDataNoArgs :exec
CALL insert_data(1, 2)
`

func (q *Queries) CallInsertDataNoArgs(ctx context.Context) error {
	ctx, done := q.observer(ctx, "CallInsertDataNoArgs")
	_, err := q.db.ExecContext(ctx, callInsertDataNoArgs)
	return done(err)
}

const callInsertDataSqlcArgs = `-- name: CallInsertDataSqlcArgs :exec
CALL insert_data($1, $2)
`

type CallInsertDataSqlcArgsParams struct {
	Foo int32
	Bar int32
}

func (q *Queries) CallInsertDataSqlcArgs(ctx context.Context, arg CallInsertDataSqlcArgsParams) error {
	ctx, done := q.observer(ctx, "CallInsertDataSqlcArgs")
	_, err := q.db.ExecContext(ctx, callInsertDataSqlcArgs, arg.Foo, arg.Bar)
	return done(err)
}
