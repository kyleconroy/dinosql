// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package test

import (
	"context"
	"encoding/json"
	"time"
)

const selectByCbinary = `-- name: SelectByCbinary :one
SELECT id FROM debug
WHERE Cbinary = ? LIMIT 1
`

func (q *Queries) SelectByCbinary(ctx context.Context, cbinary []byte, aq ...AdditionalQuery) (int64, error) {
	query := selectByCbinary
	queryParams := []interface{}{cbinary}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCbit = `-- name: SelectByCbit :one
SELECT id FROM debug
WHERE Cbit = ? LIMIT 1
`

func (q *Queries) SelectByCbit(ctx context.Context, cbit interface{}, aq ...AdditionalQuery) (int64, error) {
	query := selectByCbit
	queryParams := []interface{}{cbit}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCblob = `-- name: SelectByCblob :one
SELECT id FROM debug
WHERE Cblob = ? LIMIT 1
`

func (q *Queries) SelectByCblob(ctx context.Context, cblob []byte, aq ...AdditionalQuery) (int64, error) {
	query := selectByCblob
	queryParams := []interface{}{cblob}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCbool = `-- name: SelectByCbool :one
SELECT id FROM debug
WHERE Cbool = ? LIMIT 1
`

func (q *Queries) SelectByCbool(ctx context.Context, cbool bool, aq ...AdditionalQuery) (int64, error) {
	query := selectByCbool
	queryParams := []interface{}{cbool}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCchar = `-- name: SelectByCchar :one
SELECT id FROM debug
WHERE Cchar = ? LIMIT 1
`

func (q *Queries) SelectByCchar(ctx context.Context, cchar string, aq ...AdditionalQuery) (int64, error) {
	query := selectByCchar
	queryParams := []interface{}{cchar}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCdate = `-- name: SelectByCdate :one
SELECT id FROM debug
WHERE Cdate = ? LIMIT 1
`

func (q *Queries) SelectByCdate(ctx context.Context, cdate time.Time, aq ...AdditionalQuery) (int64, error) {
	query := selectByCdate
	queryParams := []interface{}{cdate}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCdatetime = `-- name: SelectByCdatetime :one
SELECT id FROM debug
WHERE Cdatetime = ? LIMIT 1
`

func (q *Queries) SelectByCdatetime(ctx context.Context, cdatetime time.Time, aq ...AdditionalQuery) (int64, error) {
	query := selectByCdatetime
	queryParams := []interface{}{cdatetime}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCdec = `-- name: SelectByCdec :one
SELECT id FROM debug
WHERE Cdec = ? LIMIT 1
`

func (q *Queries) SelectByCdec(ctx context.Context, cdec string, aq ...AdditionalQuery) (int64, error) {
	query := selectByCdec
	queryParams := []interface{}{cdec}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCdecimal = `-- name: SelectByCdecimal :one
SELECT id FROM debug
WHERE Cdecimal = ? LIMIT 1
`

func (q *Queries) SelectByCdecimal(ctx context.Context, cdecimal string, aq ...AdditionalQuery) (int64, error) {
	query := selectByCdecimal
	queryParams := []interface{}{cdecimal}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCdouble = `-- name: SelectByCdouble :one
SELECT id FROM debug
WHERE Cdouble = ? LIMIT 1
`

func (q *Queries) SelectByCdouble(ctx context.Context, cdouble float64, aq ...AdditionalQuery) (int64, error) {
	query := selectByCdouble
	queryParams := []interface{}{cdouble}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCdoubleprecision = `-- name: SelectByCdoubleprecision :one
SELECT id FROM debug
WHERE Cdoubleprecision = ? LIMIT 1
`

func (q *Queries) SelectByCdoubleprecision(ctx context.Context, cdoubleprecision float64, aq ...AdditionalQuery) (int64, error) {
	query := selectByCdoubleprecision
	queryParams := []interface{}{cdoubleprecision}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCenum = `-- name: SelectByCenum :one
SELECT id FROM debug
WHERE Cenum = ? LIMIT 1
`

func (q *Queries) SelectByCenum(ctx context.Context, cenum NullDebugCenum, aq ...AdditionalQuery) (int64, error) {
	query := selectByCenum
	queryParams := []interface{}{cenum}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCfixed = `-- name: SelectByCfixed :one
SELECT id FROM debug
WHERE Cfixed = ? LIMIT 1
`

func (q *Queries) SelectByCfixed(ctx context.Context, cfixed string, aq ...AdditionalQuery) (int64, error) {
	query := selectByCfixed
	queryParams := []interface{}{cfixed}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCfloat = `-- name: SelectByCfloat :one
SELECT id FROM debug
WHERE Cfloat = ? LIMIT 1
`

func (q *Queries) SelectByCfloat(ctx context.Context, cfloat float64, aq ...AdditionalQuery) (int64, error) {
	query := selectByCfloat
	queryParams := []interface{}{cfloat}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCint = `-- name: SelectByCint :one
SELECT id FROM debug
WHERE Cint = ? LIMIT 1
`

func (q *Queries) SelectByCint(ctx context.Context, cint int32, aq ...AdditionalQuery) (int64, error) {
	query := selectByCint
	queryParams := []interface{}{cint}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCinteger = `-- name: SelectByCinteger :one
SELECT id FROM debug
WHERE Cinteger = ? LIMIT 1
`

func (q *Queries) SelectByCinteger(ctx context.Context, cinteger int32, aq ...AdditionalQuery) (int64, error) {
	query := selectByCinteger
	queryParams := []interface{}{cinteger}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCjson = `-- name: SelectByCjson :one
SELECT id FROM debug
WHERE Cjson = ? LIMIT 1
`

func (q *Queries) SelectByCjson(ctx context.Context, cjson json.RawMessage, aq ...AdditionalQuery) (int64, error) {
	query := selectByCjson
	queryParams := []interface{}{cjson}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByClongblob = `-- name: SelectByClongblob :one
SELECT id FROM debug
WHERE Clongblob = ? LIMIT 1
`

func (q *Queries) SelectByClongblob(ctx context.Context, clongblob []byte, aq ...AdditionalQuery) (int64, error) {
	query := selectByClongblob
	queryParams := []interface{}{clongblob}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByClongtext = `-- name: SelectByClongtext :one
SELECT id FROM debug
WHERE Clongtext = ? LIMIT 1
`

func (q *Queries) SelectByClongtext(ctx context.Context, clongtext string, aq ...AdditionalQuery) (int64, error) {
	query := selectByClongtext
	queryParams := []interface{}{clongtext}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCmediumblob = `-- name: SelectByCmediumblob :one
SELECT id FROM debug
WHERE Cmediumblob = ? LIMIT 1
`

func (q *Queries) SelectByCmediumblob(ctx context.Context, cmediumblob []byte, aq ...AdditionalQuery) (int64, error) {
	query := selectByCmediumblob
	queryParams := []interface{}{cmediumblob}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCmediumint = `-- name: SelectByCmediumint :one
SELECT id FROM debug
WHERE Cmediumint = ? LIMIT 1
`

func (q *Queries) SelectByCmediumint(ctx context.Context, cmediumint int32, aq ...AdditionalQuery) (int64, error) {
	query := selectByCmediumint
	queryParams := []interface{}{cmediumint}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCmediumtext = `-- name: SelectByCmediumtext :one
SELECT id FROM debug
WHERE Cmediumtext = ? LIMIT 1
`

func (q *Queries) SelectByCmediumtext(ctx context.Context, cmediumtext string, aq ...AdditionalQuery) (int64, error) {
	query := selectByCmediumtext
	queryParams := []interface{}{cmediumtext}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCnumeric = `-- name: SelectByCnumeric :one
SELECT id FROM debug
WHERE Cnumeric = ? LIMIT 1
`

func (q *Queries) SelectByCnumeric(ctx context.Context, cnumeric string, aq ...AdditionalQuery) (int64, error) {
	query := selectByCnumeric
	queryParams := []interface{}{cnumeric}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCreal = `-- name: SelectByCreal :one
SELECT id FROM debug
WHERE Creal = ? LIMIT 1
`

func (q *Queries) SelectByCreal(ctx context.Context, creal float64, aq ...AdditionalQuery) (int64, error) {
	query := selectByCreal
	queryParams := []interface{}{creal}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCset = `-- name: SelectByCset :one
SELECT id FROM debug
WHERE Cset = ? LIMIT 1
`

func (q *Queries) SelectByCset(ctx context.Context, cset DebugCset, aq ...AdditionalQuery) (int64, error) {
	query := selectByCset
	queryParams := []interface{}{cset}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCsmallint = `-- name: SelectByCsmallint :one
SELECT id FROM debug
WHERE Csmallint = ? LIMIT 1
`

func (q *Queries) SelectByCsmallint(ctx context.Context, csmallint int32, aq ...AdditionalQuery) (int64, error) {
	query := selectByCsmallint
	queryParams := []interface{}{csmallint}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCtext = `-- name: SelectByCtext :one
SELECT id FROM debug
WHERE Ctext = ? LIMIT 1
`

func (q *Queries) SelectByCtext(ctx context.Context, ctext string, aq ...AdditionalQuery) (int64, error) {
	query := selectByCtext
	queryParams := []interface{}{ctext}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCtime = `-- name: SelectByCtime :one
SELECT id FROM debug
WHERE Ctime = ? LIMIT 1
`

func (q *Queries) SelectByCtime(ctx context.Context, ctime time.Time, aq ...AdditionalQuery) (int64, error) {
	query := selectByCtime
	queryParams := []interface{}{ctime}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCtimestamp = `-- name: SelectByCtimestamp :one
SELECT id FROM debug
WHERE Ctimestamp = ? LIMIT 1
`

func (q *Queries) SelectByCtimestamp(ctx context.Context, ctimestamp time.Time, aq ...AdditionalQuery) (int64, error) {
	query := selectByCtimestamp
	queryParams := []interface{}{ctimestamp}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCtinyblob = `-- name: SelectByCtinyblob :one
SELECT id FROM debug
WHERE Ctinyblob = ? LIMIT 1
`

func (q *Queries) SelectByCtinyblob(ctx context.Context, ctinyblob []byte, aq ...AdditionalQuery) (int64, error) {
	query := selectByCtinyblob
	queryParams := []interface{}{ctinyblob}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCtinyint = `-- name: SelectByCtinyint :one
SELECT id FROM debug
WHERE Ctinyint = ? LIMIT 1
`

func (q *Queries) SelectByCtinyint(ctx context.Context, ctinyint int32, aq ...AdditionalQuery) (int64, error) {
	query := selectByCtinyint
	queryParams := []interface{}{ctinyint}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCtinytext = `-- name: SelectByCtinytext :one
SELECT id FROM debug
WHERE Ctinytext = ? LIMIT 1
`

func (q *Queries) SelectByCtinytext(ctx context.Context, ctinytext string, aq ...AdditionalQuery) (int64, error) {
	query := selectByCtinytext
	queryParams := []interface{}{ctinytext}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCvarbinary = `-- name: SelectByCvarbinary :one
SELECT id FROM debug
WHERE Cvarbinary = ? LIMIT 1
`

func (q *Queries) SelectByCvarbinary(ctx context.Context, cvarbinary []byte, aq ...AdditionalQuery) (int64, error) {
	query := selectByCvarbinary
	queryParams := []interface{}{cvarbinary}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCvarchar = `-- name: SelectByCvarchar :one
SELECT id FROM debug
WHERE Cvarchar = ? LIMIT 1
`

func (q *Queries) SelectByCvarchar(ctx context.Context, cvarchar string, aq ...AdditionalQuery) (int64, error) {
	query := selectByCvarchar
	queryParams := []interface{}{cvarchar}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectByCyear = `-- name: SelectByCyear :one
SELECT id FROM debug
WHERE Cyear = ? LIMIT 1
`

func (q *Queries) SelectByCyear(ctx context.Context, cyear int32, aq ...AdditionalQuery) (int64, error) {
	query := selectByCyear
	queryParams := []interface{}{cyear}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectById = `-- name: SelectById :one
SELECT id FROM debug
WHERE id = ? LIMIT 1
`

func (q *Queries) SelectById(ctx context.Context, id int64, aq ...AdditionalQuery) (int64, error) {
	query := selectById
	queryParams := []interface{}{id}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	err := row.Scan(&id)
	return id, err
}
