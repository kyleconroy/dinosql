// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package querytest

import (
	"context"
	"database/sql"
)

const deleteUserAndReturnID = `-- name: DeleteUserAndReturnID :one
DELETE FROM users
  WHERE name = $1
  RETURNING id
`

func (q *Queries) DeleteUserAndReturnID(ctx context.Context, name sql.NullString, aq ...AdditionalQuery) (int32, error) {
	query := deleteUserAndReturnID
	queryParams := []interface{}{name}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUserAndReturnUser = `-- name: DeleteUserAndReturnUser :one
DELETE FROM users
  WHERE name = $1
  RETURNING name, id
`

func (q *Queries) DeleteUserAndReturnUser(ctx context.Context, name sql.NullString, aq ...AdditionalQuery) (User, error) {
	query := deleteUserAndReturnUser
	queryParams := []interface{}{name}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var i User
	err := row.Scan(&i.Name, &i.ID)
	return i, err
}

const insertUserAndReturnID = `-- name: InsertUserAndReturnID :one
INSERT INTO users (name) VALUES ($1)
  RETURNING id
`

func (q *Queries) InsertUserAndReturnID(ctx context.Context, name sql.NullString, aq ...AdditionalQuery) (int32, error) {
	query := insertUserAndReturnID
	queryParams := []interface{}{name}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertUserAndReturnUser = `-- name: InsertUserAndReturnUser :one
INSERT INTO users (name) VALUES ($1)
  RETURNING name, id
`

func (q *Queries) InsertUserAndReturnUser(ctx context.Context, name sql.NullString, aq ...AdditionalQuery) (User, error) {
	query := insertUserAndReturnUser
	queryParams := []interface{}{name}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var i User
	err := row.Scan(&i.Name, &i.ID)
	return i, err
}

const updateUserAndReturnID = `-- name: UpdateUserAndReturnID :one
UPDATE users SET name = $1
  WHERE name = $2
  RETURNING id
`

type UpdateUserAndReturnIDParams struct {
	Name   sql.NullString
	Name_2 sql.NullString
}

func (q *Queries) UpdateUserAndReturnID(ctx context.Context, arg UpdateUserAndReturnIDParams, aq ...AdditionalQuery) (int32, error) {
	query := updateUserAndReturnID
	queryParams := []interface{}{arg.Name, arg.Name_2}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateUserAndReturnUser = `-- name: UpdateUserAndReturnUser :one
UPDATE users SET name = $1
  WHERE name = $2
  RETURNING name, id
`

type UpdateUserAndReturnUserParams struct {
	Name   sql.NullString
	Name_2 sql.NullString
}

func (q *Queries) UpdateUserAndReturnUser(ctx context.Context, arg UpdateUserAndReturnUserParams, aq ...AdditionalQuery) (User, error) {
	query := updateUserAndReturnUser
	queryParams := []interface{}{arg.Name, arg.Name_2}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var i User
	err := row.Scan(&i.Name, &i.ID)
	return i, err
}
