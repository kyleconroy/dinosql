// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package querytest

import (
	"context"
	"database/sql"
)

const getMayors = `-- name: GetMayors :many
SELECT
    user_id,
    mayors.full_name
FROM users
LEFT JOIN cities USING (city_id)
INNER JOIN mayors USING (mayor_id)
`

type GetMayorsRow struct {
	UserID   int32
	FullName string
}

func (q *Queries) GetMayors(ctx context.Context) ([]GetMayorsRow, error) {
	rows, err := q.db.QueryContext(ctx, getMayors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMayorsRow
	for rows.Next() {
		var i GetMayorsRow
		if err := rows.Scan(&i.UserID, &i.FullName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMayorsOptional = `-- name: GetMayorsOptional :many
SELECT
    user_id,
    mayors.full_name
FROM users
LEFT JOIN cities USING (city_id)
LEFT JOIN mayors USING (mayor_id)
`

type GetMayorsOptionalRow struct {
	UserID   int32
	FullName sql.NullString
}

func (q *Queries) GetMayorsOptional(ctx context.Context) ([]GetMayorsOptionalRow, error) {
	rows, err := q.db.QueryContext(ctx, getMayorsOptional)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMayorsOptionalRow
	for rows.Next() {
		var i GetMayorsOptionalRow
		if err := rows.Scan(&i.UserID, &i.FullName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMayorsOptionalInnerSelect = `-- name: GetMayorsOptionalInnerSelect :many
SELECT t1.user_id, t2.full_name
FROM (
    SELECT user_id, city_id FROM users WHERE users.city_id = $1 LIMIT 1 OFFSET 0
) AS t1
LEFT JOIN cities on t1.city_id = cities.city_id
LEFT JOIN (
    SELECT mayors.mayor_id, mayors.full_name
    FROM mayors where mayors.mayor_id = $2
) AS t2 on t2.mayor_id = cities.mayor_id
`

type GetMayorsOptionalInnerSelectParams struct {
	CityID  sql.NullInt32
	MayorID int32
}

type GetMayorsOptionalInnerSelectRow struct {
	UserID   int32
	FullName sql.NullString
}

func (q *Queries) GetMayorsOptionalInnerSelect(ctx context.Context, arg GetMayorsOptionalInnerSelectParams) ([]GetMayorsOptionalInnerSelectRow, error) {
	rows, err := q.db.QueryContext(ctx, getMayorsOptionalInnerSelect, arg.CityID, arg.MayorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMayorsOptionalInnerSelectRow
	for rows.Next() {
		var i GetMayorsOptionalInnerSelectRow
		if err := rows.Scan(&i.UserID, &i.FullName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
