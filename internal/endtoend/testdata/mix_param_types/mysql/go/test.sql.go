// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: test.sql

package querytest

import (
	"context"
)

const countOne = `-- name: CountOne :one
SELECT count(1) FROM bar WHERE id = ? AND name <> ?
`

type CountOneParams struct {
	ID   uint64
	Name string
}

func (q *Queries) CountOne(ctx context.Context, arg CountOneParams, aq ...AdditionalQuery) (int64, error) {
	query := countOne
	queryParams := []interface{}{arg.ID, arg.Name}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countThree = `-- name: CountThree :one
SELECT count(1) FROM bar WHERE id > ? AND phone <> ? AND name <> ?
`

type CountThreeParams struct {
	ID    uint64
	Phone string
	Name  string
}

func (q *Queries) CountThree(ctx context.Context, arg CountThreeParams, aq ...AdditionalQuery) (int64, error) {
	query := countThree
	queryParams := []interface{}{arg.ID, arg.Phone, arg.Name}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTwo = `-- name: CountTwo :one
SELECT count(1) FROM bar WHERE id = ? AND name <> ?
`

type CountTwoParams struct {
	ID   uint64
	Name string
}

func (q *Queries) CountTwo(ctx context.Context, arg CountTwoParams, aq ...AdditionalQuery) (int64, error) {
	query := countTwo
	queryParams := []interface{}{arg.ID, arg.Name}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var count int64
	err := row.Scan(&count)
	return count, err
}
