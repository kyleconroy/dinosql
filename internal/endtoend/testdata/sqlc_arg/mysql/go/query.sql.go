// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package querytest

import (
	"context"
	"database/sql"
)

const funcParamIdent = `-- name: FuncParamIdent :many
SELECT name FROM foo WHERE name = ?
`

func (q *Queries) FuncParamIdent(ctx context.Context, slug string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, funcParamIdent, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const funcParamString = `-- name: FuncParamString :many
SELECT name FROM foo WHERE name = ?
`

func (q *Queries) FuncParamString(ctx context.Context, slug string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, funcParamString, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const funcParamStringOptional = `-- name: FuncParamStringOptional :exec
UPDATE foo SET name = coalesce(?, name)
`

func (q *Queries) FuncParamStringOptional(ctx context.Context, slug sql.NullString) error {
	_, err := q.db.ExecContext(ctx, funcParamStringOptional, slug)
	return err
}

const funcParamStringRequired = `-- name: FuncParamStringRequired :exec
UPDATE foo SET description = ?
`

func (q *Queries) FuncParamStringRequired(ctx context.Context, slug string) error {
	_, err := q.db.ExecContext(ctx, funcParamStringRequired, slug)
	return err
}
