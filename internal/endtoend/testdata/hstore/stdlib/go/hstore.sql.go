// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: hstore.sql

package hstore

import (
	"context"
)

const listBar = `-- name: ListBar :many
SELECT bar FROM foo
`

func (q *Queries) ListBar(ctx context.Context) ([]interface{}, error) {
	ctx, done := q.observer(ctx, "ListBar")
	rows, err := q.db.QueryContext(ctx, listBar)
	if err != nil {
		return nil, done(err)
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var bar interface{}
		if err := rows.Scan(&bar); err != nil {
			return nil, done(err)
		}
		items = append(items, bar)
	}
	if err := rows.Close(); err != nil {
		return nil, done(err)
	}
	if err := rows.Err(); err != nil {
		return nil, done(err)
	}
	return items, done(nil)
}

const listBaz = `-- name: ListBaz :many
SELECT baz FROM foo
`

func (q *Queries) ListBaz(ctx context.Context) ([]interface{}, error) {
	ctx, done := q.observer(ctx, "ListBaz")
	rows, err := q.db.QueryContext(ctx, listBaz)
	if err != nil {
		return nil, done(err)
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var baz interface{}
		if err := rows.Scan(&baz); err != nil {
			return nil, done(err)
		}
		items = append(items, baz)
	}
	if err := rows.Close(); err != nil {
		return nil, done(err)
	}
	if err := rows.Err(); err != nil {
		return nil, done(err)
	}
	return items, done(nil)
}
