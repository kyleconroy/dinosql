// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package querytest

import (
	"context"
	"database/sql"
	"strings"
)

const selectUsers = `-- name: SelectUsers :many
SELECT first_name, last_name FROM users WHERE age > $1
`

type SelectUsersRow struct {
	FirstName string
	LastName  sql.NullString
}

func (q *Queries) SelectUsers(ctx context.Context, age int32) ([]SelectUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, selectUsers, age)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectUsersRow
	for rows.Next() {
		var i SelectUsersRow
		if err := rows.Scan(&i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUsersDynamic2 = `-- name: SelectUsersDynamic2 :many
SELECT first_name, last_name
FROM users
WHERE age > $1 AND
    job_status = $2 AND
    /*DYNAMIC:dynamic*/$1
`

type SelectUsersDynamic2Params struct {
	Age     int32
	Status  string
	Dynamic DynamicSql
}

type SelectUsersDynamic2Row struct {
	FirstName string
	LastName  sql.NullString
}

func (q *Queries) SelectUsersDynamic2(ctx context.Context, arg SelectUsersDynamic2Params) ([]SelectUsersDynamic2Row, error) {
	query := selectUsersDynamic2
	var queryParams []interface{}
	curNumb := 3
	var replaceText string
	var args []interface{}
	queryParams = append(queryParams, arg.Age)
	queryParams = append(queryParams, arg.Status)
	replaceText, args = arg.Dynamic.ToSql(curNumb)
	curNumb += len(args)
	query = strings.ReplaceAll(query, "/*DYNAMIC:dynamic*/$1", replaceText)
	queryParams = append(queryParams, args...)
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectUsersDynamic2Row
	for rows.Next() {
		var i SelectUsersDynamic2Row
		if err := rows.Scan(&i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUsersDynamicA = `-- name: SelectUsersDynamicA :many
SELECT first_name, last_name FROM users WHERE age > $1 AND /*DYNAMIC:dynamic*/$1
`

type SelectUsersDynamicAParams struct {
	Age     int32
	Dynamic DynamicSql
}

type SelectUsersDynamicARow struct {
	FirstName string
	LastName  sql.NullString
}

func (q *Queries) SelectUsersDynamicA(ctx context.Context, arg SelectUsersDynamicAParams) ([]SelectUsersDynamicARow, error) {
	query := selectUsersDynamicA
	var queryParams []interface{}
	curNumb := 2
	var replaceText string
	var args []interface{}
	queryParams = append(queryParams, arg.Age)
	replaceText, args = arg.Dynamic.ToSql(curNumb)
	curNumb += len(args)
	query = strings.ReplaceAll(query, "/*DYNAMIC:dynamic*/$1", replaceText)
	queryParams = append(queryParams, args...)
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectUsersDynamicARow
	for rows.Next() {
		var i SelectUsersDynamicARow
		if err := rows.Scan(&i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUsersDynamicB = `-- name: SelectUsersDynamicB :many
SELECT first_name, last_name FROM users WHERE /*DYNAMIC:dynamic*/$1 AND age > $1
`

type SelectUsersDynamicBParams struct {
	Age     int32
	Dynamic DynamicSql
}

type SelectUsersDynamicBRow struct {
	FirstName string
	LastName  sql.NullString
}

func (q *Queries) SelectUsersDynamicB(ctx context.Context, arg SelectUsersDynamicBParams) ([]SelectUsersDynamicBRow, error) {
	query := selectUsersDynamicB
	var queryParams []interface{}
	curNumb := 2
	var replaceText string
	var args []interface{}
	queryParams = append(queryParams, arg.Age)
	replaceText, args = arg.Dynamic.ToSql(curNumb)
	curNumb += len(args)
	query = strings.ReplaceAll(query, "/*DYNAMIC:dynamic*/$1", replaceText)
	queryParams = append(queryParams, args...)
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectUsersDynamicBRow
	for rows.Next() {
		var i SelectUsersDynamicBRow
		if err := rows.Scan(&i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUsersDynamicMulti = `-- name: SelectUsersDynamicMulti :many
SELECT first_name, last_name
FROM users
WHERE age > $1 AND
    job_status = $2 AND
    /*DYNAMIC:dynamic*/$1
ORDER BY /*DYNAMIC:order*/$1
`

type SelectUsersDynamicMultiParams struct {
	Age     int32
	Status  string
	Dynamic DynamicSql
	Order   DynamicSql
}

type SelectUsersDynamicMultiRow struct {
	FirstName string
	LastName  sql.NullString
}

func (q *Queries) SelectUsersDynamicMulti(ctx context.Context, arg SelectUsersDynamicMultiParams) ([]SelectUsersDynamicMultiRow, error) {
	query := selectUsersDynamicMulti
	var queryParams []interface{}
	curNumb := 3
	var replaceText string
	var args []interface{}
	queryParams = append(queryParams, arg.Age)
	queryParams = append(queryParams, arg.Status)
	replaceText, args = arg.Dynamic.ToSql(curNumb)
	curNumb += len(args)
	query = strings.ReplaceAll(query, "/*DYNAMIC:dynamic*/$1", replaceText)
	queryParams = append(queryParams, args...)
	replaceText, args = arg.Order.ToSql(curNumb)
	curNumb += len(args)
	query = strings.ReplaceAll(query, "/*DYNAMIC:order*/$1", replaceText)
	queryParams = append(queryParams, args...)
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectUsersDynamicMultiRow
	for rows.Next() {
		var i SelectUsersDynamicMultiRow
		if err := rows.Scan(&i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUsersDynamicMultiB = `-- name: SelectUsersDynamicMultiB :many
SELECT first_name, last_name
FROM users
WHERE /*DYNAMIC:dynamic*/$1 AND
    age > $1 AND
    job_status = $2
ORDER BY /*DYNAMIC:order*/$1
`

type SelectUsersDynamicMultiBParams struct {
	Age     int32
	Status  string
	Dynamic DynamicSql
	Order   DynamicSql
}

type SelectUsersDynamicMultiBRow struct {
	FirstName string
	LastName  sql.NullString
}

func (q *Queries) SelectUsersDynamicMultiB(ctx context.Context, arg SelectUsersDynamicMultiBParams) ([]SelectUsersDynamicMultiBRow, error) {
	query := selectUsersDynamicMultiB
	var queryParams []interface{}
	curNumb := 3
	var replaceText string
	var args []interface{}
	queryParams = append(queryParams, arg.Age)
	queryParams = append(queryParams, arg.Status)
	replaceText, args = arg.Dynamic.ToSql(curNumb)
	curNumb += len(args)
	query = strings.ReplaceAll(query, "/*DYNAMIC:dynamic*/$1", replaceText)
	queryParams = append(queryParams, args...)
	replaceText, args = arg.Order.ToSql(curNumb)
	curNumb += len(args)
	query = strings.ReplaceAll(query, "/*DYNAMIC:order*/$1", replaceText)
	queryParams = append(queryParams, args...)
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectUsersDynamicMultiBRow
	for rows.Next() {
		var i SelectUsersDynamicMultiBRow
		if err := rows.Scan(&i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
