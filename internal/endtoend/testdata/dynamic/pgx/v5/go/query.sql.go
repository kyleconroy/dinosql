// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package querytest

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const selectUsers = `-- name: SelectUsers :many
SELECT first_name, last_name FROM users WHERE age > $1
`

type SelectUsersRow struct {
	FirstName string
	LastName  pgtype.Text
}

func (q *Queries) SelectUsers(ctx context.Context, age int32) ([]SelectUsersRow, error) {
	rows, err := q.db.Query(ctx, selectUsers, age)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectUsersRow
	for rows.Next() {
		var i SelectUsersRow
		if err := rows.Scan(&i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUsersDynamic = `-- name: SelectUsersDynamic :many
SELECT first_name, last_name FROM users WHERE age > $1 AND /*DYNAMIC:dynamic*/$1
`

type SelectUsersDynamicParams struct {
	Age     int32
	Dynamic DynamicSql
}

type SelectUsersDynamicRow struct {
	FirstName string
	LastName  pgtype.Text
}

func (q *Queries) SelectUsersDynamic(ctx context.Context, arg SelectUsersDynamicParams) ([]SelectUsersDynamicRow, error) {
	queryParams := []interface{}{arg.Age}
	curNumb := 2
	replaceText, args := arg.Dynamic.ToSql(curNumb)
	curNumb += len(args)
	query = strings.ReplaceAll(query, "/*DYNAMIC:dynamic*/$1", replaceText)
	queryParams = append(queryParams, args...)
	rows, err := q.db.Query(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectUsersDynamicRow
	for rows.Next() {
		var i SelectUsersDynamicRow
		if err := rows.Scan(&i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUsersDynamic2 = `-- name: SelectUsersDynamic2 :many
SELECT first_name, last_name
FROM users
WHERE age > $1 AND
    job_status = $2 AND
    /*DYNAMIC:dynamic*/$1
`

type SelectUsersDynamic2Params struct {
	Age     int32
	Status  string
	Dynamic DynamicSql
}

type SelectUsersDynamic2Row struct {
	FirstName string
	LastName  pgtype.Text
}

func (q *Queries) SelectUsersDynamic2(ctx context.Context, arg SelectUsersDynamic2Params) ([]SelectUsersDynamic2Row, error) {
	queryParams := []interface{}{arg.Age, arg.Status}
	curNumb := 3
	replaceText, args := arg.Dynamic.ToSql(curNumb)
	curNumb += len(args)
	query = strings.ReplaceAll(query, "/*DYNAMIC:dynamic*/$1", replaceText)
	queryParams = append(queryParams, args...)
	rows, err := q.db.Query(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectUsersDynamic2Row
	for rows.Next() {
		var i SelectUsersDynamic2Row
		if err := rows.Scan(&i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUsersDynamicMulti = `-- name: SelectUsersDynamicMulti :many
SELECT first_name, last_name
FROM users
WHERE age > $1 AND
    job_status = $2 AND
    /*DYNAMIC:dynamic*/$1
ORDER BY /*DYNAMIC:order*/$1
`

type SelectUsersDynamicMultiParams struct {
	Age     int32
	Status  string
	Dynamic DynamicSql
	Order   DynamicSql
}

type SelectUsersDynamicMultiRow struct {
	FirstName string
	LastName  pgtype.Text
}

func (q *Queries) SelectUsersDynamicMulti(ctx context.Context, arg SelectUsersDynamicMultiParams) ([]SelectUsersDynamicMultiRow, error) {
	queryParams := []interface{}{arg.Age, arg.Status}
	curNumb := 3
	replaceText, args := arg.Dynamic.ToSql(curNumb)
	curNumb += len(args)
	query = strings.ReplaceAll(query, "/*DYNAMIC:dynamic*/$1", replaceText)
	queryParams = append(queryParams, args...)
	replaceText, args := arg.Order.ToSql(curNumb)
	curNumb += len(args)
	query = strings.ReplaceAll(query, "/*DYNAMIC:order*/$1", replaceText)
	queryParams = append(queryParams, args...)
	rows, err := q.db.Query(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectUsersDynamicMultiRow
	for rows.Next() {
		var i SelectUsersDynamicMultiRow
		if err := rows.Scan(&i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
