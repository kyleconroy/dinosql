// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0

package querytest

import (
	"database/sql/driver"
	"fmt"
)

type AuthorsFoo string

const (
	AuthorsFooOk AuthorsFoo = "ok"
)

func (e *AuthorsFoo) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuthorsFoo(s)
	case string:
		*e = AuthorsFoo(s)
	default:
		return fmt.Errorf("unsupported scan type for AuthorsFoo: %T", src)
	}
	return nil
}

type NullAuthorsFoo struct {
	AuthorsFoo AuthorsFoo
	Valid      bool // Valid is true if AuthorsFoo is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuthorsFoo) Scan(value interface{}) error {
	if value == nil {
		ns.AuthorsFoo, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuthorsFoo.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuthorsFoo) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuthorsFoo), nil
}

type AuthorsRenamed string

const (
	AuthorsRenamedOk AuthorsRenamed = "ok"
)

func (e *AuthorsRenamed) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuthorsRenamed(s)
	case string:
		*e = AuthorsRenamed(s)
	default:
		return fmt.Errorf("unsupported scan type for AuthorsRenamed: %T", src)
	}
	return nil
}

type NullAuthorsRenamed struct {
	AuthorsRenamed AuthorsRenamed
	Valid          bool // Valid is true if AuthorsRenamed is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuthorsRenamed) Scan(value interface{}) error {
	if value == nil {
		ns.AuthorsRenamed, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuthorsRenamed.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuthorsRenamed) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuthorsRenamed), nil
}

type RenamedFoo string

const (
	RenamedFooOk RenamedFoo = "ok"
)

func (e *RenamedFoo) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RenamedFoo(s)
	case string:
		*e = RenamedFoo(s)
	default:
		return fmt.Errorf("unsupported scan type for RenamedFoo: %T", src)
	}
	return nil
}

type NullRenamedFoo struct {
	RenamedFoo RenamedFoo
	Valid      bool // Valid is true if RenamedFoo is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRenamedFoo) Scan(value interface{}) error {
	if value == nil {
		ns.RenamedFoo, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RenamedFoo.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRenamedFoo) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RenamedFoo), nil
}

type Author struct {
	ID         int64
	Foo        AuthorsFoo
	Bar        AuthorsRenamed
	Added      string
	AddItem    string
	RemoveItem string
}

type Book struct {
	ID  int64
	Foo RenamedFoo
}
