// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package querytest

import (
	"context"
	"database/sql"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (
  name, bio, country_code
) VALUES (
  $1, $2, $3
)
RETURNING id, name, bio, country_code
`

type CreateAuthorParams struct {
	Name        string
	Bio         sql.NullString
	CountryCode string
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams, aq ...AdditionalQuery) (Author, error) {
	query := createAuthor
	queryParams := []interface{}{arg.Name, arg.Bio, arg.CountryCode}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.CountryCode,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = $1
`

type DeleteAuthorParams struct {
	ID int64
}

func (q *Queries) DeleteAuthor(ctx context.Context, arg DeleteAuthorParams) error {
	query := deleteAuthor
	queryParams := []interface{}{arg.ID}

	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, bio, country_code FROM authors
WHERE name = $1 AND country_code = $2 LIMIT 1
`

type GetAuthorParams struct {
	Name        string
	CountryCode string
}

func (q *Queries) GetAuthor(ctx context.Context, arg GetAuthorParams, aq ...AdditionalQuery) (Author, error) {
	query := getAuthor
	queryParams := []interface{}{arg.Name, arg.CountryCode}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.CountryCode,
	)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, bio, country_code FROM authors
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context, aq ...AdditionalQuery) ([]Author, error) {
	query := listAuthors
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.CountryCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
