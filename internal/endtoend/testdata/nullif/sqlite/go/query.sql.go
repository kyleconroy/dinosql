// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: query.sql

package querytest

import (
	"context"
)

const updateChild = `-- name: UpdateChild :one
UPDATE Child SET
    name  = COALESCE(?, name),
    dob   = COALESCE(?, dob),
    photo = COALESCE(?, photo)
    WHERE
        publicid = ?
    RETURNING id, publicid, name, dob, photo
`

type UpdateChildParams struct {
	Name     string
	Dob      string
	Photo    []byte
	Publicid string
}

func (q *Queries) UpdateChild(ctx context.Context, arg UpdateChildParams) (Child, error) {
	row := q.db.QueryRowContext(ctx, updateChild,
		arg.Name,
		arg.Dob,
		arg.Photo,
		arg.Publicid,
	)
	var i Child
	err := row.Scan(
		&i.ID,
		&i.Publicid,
		&i.Name,
		&i.Dob,
		&i.Photo,
	)
	return i, err
}

const updateChildNullIf = `-- name: UpdateChildNullIf :one
UPDATE Child SET
    name  = COALESCE(nullif(?,''), name),
    dob   = COALESCE(nullif(?,''), dob),
    photo = COALESCE(?,photo)
    WHERE
        publicid = ?
    RETURNING id, publicid, name, dob, photo
`

type UpdateChildNullIfParams struct {
	Name     string
	Dob      string
	Photo    []byte
	Publicid string
}

func (q *Queries) UpdateChildNullIf(ctx context.Context, arg UpdateChildNullIfParams) (Child, error) {
	row := q.db.QueryRowContext(ctx, updateChildNullIf,
		arg.Name,
		arg.Dob,
		arg.Photo,
		arg.Publicid,
	)
	var i Child
	err := row.Scan(
		&i.ID,
		&i.Publicid,
		&i.Name,
		&i.Dob,
		&i.Photo,
	)
	return i, err
}
