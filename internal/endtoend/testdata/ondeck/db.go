// Code generated by sqlc. DO NOT EDIT.

package ondeck

import (
	"context"
	"database/sql"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

type Queries struct {
	db DBTX
}

type Querier interface {
	CreateCity(ctx context.Context, arg CreateCityParams) (City, error)
	CreateVenue(ctx context.Context, arg CreateVenueParams) (int32, error)
	DeleteVenue(ctx context.Context, slug string) error
	GetCity(ctx context.Context, slug string) (City, error)
	GetVenue(ctx context.Context, arg GetVenueParams) (Venue, error)
	ListCityByName(ctx context.Context) ([]City, error)
	ListVenues(ctx context.Context, city string) ([]Venue, error)
	UpdateCity(ctx context.Context, arg UpdateCityParams) error
	UpdateVenueName(ctx context.Context, arg UpdateVenueNameParams) (int32, error)
	VenueCountByCity(ctx context.Context) ([]VenueCountByCityRow, error)
	WithTx(*sql.Tx) Querier
}

var _ Querier = (*Queries)(nil)

func (q *Queries) WithTx(tx *sql.Tx) Querier {
	return &Queries{
		db: tx,
	}
}
