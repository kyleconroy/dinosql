// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package querytest

import (
	"context"
	"database/sql"
)

const advisoryLockExecResult = `-- name: AdvisoryLockExecResult :execresult
SELECT pg_advisory_lock($1)
`

func (q *Queries) AdvisoryLockExecResult(ctx context.Context, pgAdvisoryLock int64) (sql.Result, error) {
	query := advisoryLockExecResult
	queryParams := []interface{}{pgAdvisoryLock}

	return q.db.ExecContext(ctx, query, queryParams...)
}

const advisoryLockOne = `-- name: AdvisoryLockOne :one
SELECT pg_advisory_lock($1)
`

func (q *Queries) AdvisoryLockOne(ctx context.Context, pgAdvisoryLock int64, aq ...AdditionalQuery) (interface{}, error) {
	query := advisoryLockOne
	queryParams := []interface{}{pgAdvisoryLock}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var pg_advisory_lock interface{}
	err := row.Scan(&pg_advisory_lock)
	return pg_advisory_lock, err
}

const advisoryUnlock = `-- name: AdvisoryUnlock :many
SELECT pg_advisory_unlock($1)
`

func (q *Queries) AdvisoryUnlock(ctx context.Context, pgAdvisoryUnlock int64, aq ...AdditionalQuery) ([]bool, error) {
	query := advisoryUnlock
	queryParams := []interface{}{pgAdvisoryUnlock}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []bool
	for rows.Next() {
		var pg_advisory_unlock bool
		if err := rows.Scan(&pg_advisory_unlock); err != nil {
			return nil, err
		}
		items = append(items, pg_advisory_unlock)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
