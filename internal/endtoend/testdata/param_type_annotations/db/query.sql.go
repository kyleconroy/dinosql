// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const testAt = `-- name: TestAt :one
SELECT id, name FROM test WHERE name = $1
`

// @param foo integer
func (q *Queries) TestAt(ctx context.Context, foo sql.NullInt32) (Test, error) {
	row := q.db.QueryRowContext(ctx, testAt, foo)
	var i Test
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const testForceNotNull = `-- name: TestForceNotNull :one
SELECT id, name FROM test WHERE name = $1
`

// @param foo! uuid
func (q *Queries) TestForceNotNull(ctx context.Context, foo uuid.UUID) (Test, error) {
	row := q.db.QueryRowContext(ctx, testForceNotNull, foo)
	var i Test
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const testForceNullable = `-- name: TestForceNullable :one
SELECT id, name FROM test WHERE id = $1
`

// @param foo? uuid
func (q *Queries) TestForceNullable(ctx context.Context, foo uuid.NullUUID) (Test, error) {
	row := q.db.QueryRowContext(ctx, testForceNullable, foo)
	var i Test
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const testGibberish = `-- name: TestGibberish :one
SELECT id, name FROM test WHERE id = $1
`

// @param foo? uuid sdfagyi
func (q *Queries) TestGibberish(ctx context.Context, foo interface{}) (Test, error) {
	row := q.db.QueryRowContext(ctx, testGibberish, foo)
	var i Test
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const testSqlcArg = `-- name: TestSqlcArg :one
SELECT id, name FROM test WHERE id = $1
`

// @param foo text
func (q *Queries) TestSqlcArg(ctx context.Context, foo string) (Test, error) {
	row := q.db.QueryRowContext(ctx, testSqlcArg, foo)
	var i Test
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
