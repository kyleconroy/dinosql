// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0

package querytest

import (
	"database/sql/driver"
	"fmt"
)

type Digit string

const (
	Digit0       Digit = "0"
	Digit1       Digit = "1"
	Digit2       Digit = "2"
	Digit3       Digit = "3"
	Digit4       Digit = "4"
	Digit5       Digit = "5"
	Digit6       Digit = "6"
	Digit7       Digit = "7"
	Digit8       Digit = "8"
	Digit9       Digit = "9"
	DigitValue10 Digit = "#"
	DigitValue11 Digit = "*"
)

func (e *Digit) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Digit(s)
	case string:
		*e = Digit(s)
	default:
		return fmt.Errorf("unsupported scan type for Digit: %T", src)
	}
	return nil
}

// NullDigit is the nullable version of Digit.
type NullDigit struct {
	Digit Digit
	Valid bool
}

func (e *NullDigit) Scan(src interface{}) error {
	if src == nil {
		e.Valid = false
		return nil
	}
	switch s := src.(type) {
	case []byte:
		e.Digit = Digit(s)
	case string:
		e.Digit = Digit(s)
	default:
		return fmt.Errorf("unsupported scan type for NullDigit: %T", src)
	}
	e.Valid = len(e.Digit) > 0
	return nil
}

func (e *NullDigit) Value() (driver.Value, error) {
	if !e.Valid {
		return nil, nil
	}
	return string(e.Digit), nil
}

type Foobar string

const (
	FoobarFooA Foobar = "foo-a"
	FoobarFooB Foobar = "foo_b"
	FoobarFooC Foobar = "foo:c"
	FoobarFooD Foobar = "foo/d"
	FoobarFooe Foobar = "foo@e"
	FoobarFoof Foobar = "foo+f"
	FoobarFoog Foobar = "foo!g"
)

func (e *Foobar) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Foobar(s)
	case string:
		*e = Foobar(s)
	default:
		return fmt.Errorf("unsupported scan type for Foobar: %T", src)
	}
	return nil
}

// NullFoobar is the nullable version of Foobar.
type NullFoobar struct {
	Foobar Foobar
	Valid  bool
}

func (e *NullFoobar) Scan(src interface{}) error {
	if src == nil {
		e.Valid = false
		return nil
	}
	switch s := src.(type) {
	case []byte:
		e.Foobar = Foobar(s)
	case string:
		e.Foobar = Foobar(s)
	default:
		return fmt.Errorf("unsupported scan type for NullFoobar: %T", src)
	}
	e.Valid = len(e.Foobar) > 0
	return nil
}

func (e *NullFoobar) Value() (driver.Value, error) {
	if !e.Valid {
		return nil, nil
	}
	return string(e.Foobar), nil
}

type Foo struct {
	Val Foobar
}
