// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: mathfunc.sql

package querytest

import (
	"context"
)

const getAcos = `-- name: GetAcos :one
select acos(1.0)
`

func (q *Queries) GetAcos(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getAcos
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var acos float64
	err := row.Scan(&acos)
	return acos, err
}

const getAcosh = `-- name: GetAcosh :one
select acosh(1.0)
`

func (q *Queries) GetAcosh(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getAcosh
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var acosh float64
	err := row.Scan(&acosh)
	return acosh, err
}

const getAsin = `-- name: GetAsin :one
select asin(1.0)
`

func (q *Queries) GetAsin(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getAsin
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var asin float64
	err := row.Scan(&asin)
	return asin, err
}

const getAsinh = `-- name: GetAsinh :one
select asinh(1.0)
`

func (q *Queries) GetAsinh(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getAsinh
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var asinh float64
	err := row.Scan(&asinh)
	return asinh, err
}

const getAtan = `-- name: GetAtan :one
select atan(1.0)
`

func (q *Queries) GetAtan(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getAtan
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var atan float64
	err := row.Scan(&atan)
	return atan, err
}

const getAtan2 = `-- name: GetAtan2 :one
select atan2(1.0, 0.5)
`

func (q *Queries) GetAtan2(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getAtan2
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var atan2 float64
	err := row.Scan(&atan2)
	return atan2, err
}

const getAtanh = `-- name: GetAtanh :one
select atanh(1.0)
`

func (q *Queries) GetAtanh(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getAtanh
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var atanh float64
	err := row.Scan(&atanh)
	return atanh, err
}

const getCeil = `-- name: GetCeil :one
select ceil(1.0)
`

func (q *Queries) GetCeil(ctx context.Context, aq ...AdditionalQuery) (int64, error) {
	query := getCeil
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var ceil int64
	err := row.Scan(&ceil)
	return ceil, err
}

const getCeilin = `-- name: GetCeilin :one
select ceiling(1.0)
`

func (q *Queries) GetCeilin(ctx context.Context, aq ...AdditionalQuery) (int64, error) {
	query := getCeilin
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var ceiling int64
	err := row.Scan(&ceiling)
	return ceiling, err
}

const getCos = `-- name: GetCos :one
select cos(1.0)
`

func (q *Queries) GetCos(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getCos
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var cos float64
	err := row.Scan(&cos)
	return cos, err
}

const getCosh = `-- name: GetCosh :one
select cosh(1.0)
`

func (q *Queries) GetCosh(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getCosh
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var cosh float64
	err := row.Scan(&cosh)
	return cosh, err
}

const getDegrees = `-- name: GetDegrees :one
select degrees(1.0)
`

func (q *Queries) GetDegrees(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getDegrees
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var degrees float64
	err := row.Scan(&degrees)
	return degrees, err
}

const getExp = `-- name: GetExp :one
select exp(1.0)
`

func (q *Queries) GetExp(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getExp
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var exp float64
	err := row.Scan(&exp)
	return exp, err
}

const getFloor = `-- name: GetFloor :one
select floor(1.0)
`

func (q *Queries) GetFloor(ctx context.Context, aq ...AdditionalQuery) (int64, error) {
	query := getFloor
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var floor int64
	err := row.Scan(&floor)
	return floor, err
}

const getLn = `-- name: GetLn :one
select ln(1.0)
`

func (q *Queries) GetLn(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getLn
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var ln float64
	err := row.Scan(&ln)
	return ln, err
}

const getLog = `-- name: GetLog :one
select log(1.0)
`

func (q *Queries) GetLog(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getLog
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var log float64
	err := row.Scan(&log)
	return log, err
}

const getLog10 = `-- name: GetLog10 :one
select log10(1.0)
`

func (q *Queries) GetLog10(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getLog10
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var log10 float64
	err := row.Scan(&log10)
	return log10, err
}

const getLog2 = `-- name: GetLog2 :one
select log2(1.0)
`

func (q *Queries) GetLog2(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getLog2
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var log2 float64
	err := row.Scan(&log2)
	return log2, err
}

const getLogBase = `-- name: GetLogBase :one
select log(1.0, 2.0)
`

func (q *Queries) GetLogBase(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getLogBase
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var log float64
	err := row.Scan(&log)
	return log, err
}

const getMod = `-- name: GetMod :one
select mod(1, 2)
`

func (q *Queries) GetMod(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getMod
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var mod float64
	err := row.Scan(&mod)
	return mod, err
}

const getPi = `-- name: GetPi :one
select pi()
`

func (q *Queries) GetPi(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getPi
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var pi float64
	err := row.Scan(&pi)
	return pi, err
}

const getPow = `-- name: GetPow :one
select pow(1, 2)
`

func (q *Queries) GetPow(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getPow
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var pow float64
	err := row.Scan(&pow)
	return pow, err
}

const getPower = `-- name: GetPower :one
select power(1, 2)
`

func (q *Queries) GetPower(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getPower
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var power float64
	err := row.Scan(&power)
	return power, err
}

const getRadians = `-- name: GetRadians :one
select radians(1)
`

func (q *Queries) GetRadians(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getRadians
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var radians float64
	err := row.Scan(&radians)
	return radians, err
}

const getSin = `-- name: GetSin :one
select sin(1.0)
`

func (q *Queries) GetSin(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getSin
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var sin float64
	err := row.Scan(&sin)
	return sin, err
}

const getSinh = `-- name: GetSinh :one
select sinh(1.0)
`

func (q *Queries) GetSinh(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getSinh
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var sinh float64
	err := row.Scan(&sinh)
	return sinh, err
}

const getSqrt = `-- name: GetSqrt :one
select sqrt(1.0)
`

func (q *Queries) GetSqrt(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getSqrt
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var sqrt float64
	err := row.Scan(&sqrt)
	return sqrt, err
}

const getTan = `-- name: GetTan :one
select tan(1.0)
`

func (q *Queries) GetTan(ctx context.Context, aq ...AdditionalQuery) (float64, error) {
	query := getTan
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var tan float64
	err := row.Scan(&tan)
	return tan, err
}

const getTrunc = `-- name: GetTrunc :one
select trunc(1.0)
`

func (q *Queries) GetTrunc(ctx context.Context, aq ...AdditionalQuery) (int64, error) {
	query := getTrunc
	queryParams := []interface{}{}

	if len(aq) > 0 {
		query += " " + aq[0].SQL
		queryParams = append(queryParams, aq[0].Args...)
	}

	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var trunc int64
	err := row.Scan(&trunc)
	return trunc, err
}
