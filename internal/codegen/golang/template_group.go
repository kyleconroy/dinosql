package golang

const groupTemplateSet = `
{{define "dbFile"}}// Code generated by sqlc. DO NOT EDIT.

package {{.Package}}

import (
	{{range imports .SourceName}}
	{{range .}}{{.}}
	{{end}}
	{{end}}
)

{{template "dbCode" . }}
{{end}}

{{define "dbCode"}}
type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}
{{end}}

{{define "modelsFile"}}// Code generated by sqlc. DO NOT EDIT.

package {{.Package}}

import (
	{{range imports .SourceName}}
	{{range .}}{{.}}
	{{end}}
	{{end}}
)

{{template "modelsCode" . }}
{{end}}

{{define "modelsCode"}}
{{range .Enums}}
{{if .Comment}}{{comment .Comment}}{{end}}
type {{.Name}} string

const (
	{{- range .Constants}}
	{{.Name}} {{.Type}} = "{{.Value}}"
	{{- end}}
)

func (e *{{.Name}}) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = {{.Name}}(s)
	case string:
		*e = {{.Name}}(s)
	default:
		return fmt.Errorf("unsupported scan type for {{.Name}}: %T", src)
	}
	return nil
}
{{end}}

{{range .Structs}}
{{if .Comment}}{{comment .Comment}}{{end}}
type {{.Name}} struct { {{- range .Fields}}
  {{- if .Comment}}
  {{comment .Comment}}{{else}}
  {{- end}}
  {{.Name}} {{.Type}} {{if or ($.EmitJSONTags) ($.EmitDBTags)}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}
{{end}}

{{define "queryFile"}}// Code generated by sqlc. DO NOT EDIT.
// source: {{.SourceName}}

package {{.Package}}

import (
	{{range imports .SourceName}}
	{{range .}}{{.}}
	{{end}}
	{{end}}
)

type {{.StructName}} struct {
	db DBTX
}

func New{{.StructName}}(db DBTX) *{{.StructName}} {
	return &{{.StructName}}{db: db}
}

{{template "queryCode" . }}
{{end}}

{{define "queryCode"}}
{{range .GoQueries}}
{{if $.OutputQuery .SourceName}}
const {{.ConstantName}} = {{$.Q}}-- name: {{.MethodName}} {{.Cmd}}
{{escape .SQL}}
{{$.Q}}

{{if .Arg.EmitStruct}}
type {{.Arg.Type}} struct { {{- range .Arg.Struct.Fields}}
  {{.Name}} {{.Type}} {{if or ($.EmitJSONTags) ($.EmitDBTags)}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}

{{if .Ret.EmitStruct}}
type {{.Ret.Type}} struct { {{- range .Ret.Struct.Fields}}
  {{.Name}} {{.Type}} {{if or ($.EmitJSONTags) ($.EmitDBTags)}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}

{{if eq .Cmd ":one"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *{{.StructName}}) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}) ({{.Ret.Type}}, error) {
	row := q.db.QueryRowContext(ctx, {{.ConstantName}}, {{.Arg.Params}})
	var {{.Ret.Name}} {{.Ret.Type}}
	err := row.Scan({{.Ret.Scan}})
	return {{.Ret.Name}}, err
}
{{- if $.EmitPreparedQueries}}

type {{.StructName}}{{.MethodName}}Stmt struct {
	stmt *sql.Stmt
}

func (s *{{.StructName}}{{.MethodName}}Stmt) Close() error {
	return s.stmt.Close()
}

func (s *{{.StructName}}{{.MethodName}}Stmt) JoinTx(ctx context.Context, tx *sql.Tx) *{{.StructName}}{{.MethodName}}Stmt {
	stmt := tx.StmtContext(ctx, s.stmt)
	return &{{.StructName}}{{.MethodName}}Stmt{stmt: stmt}
}

func (s *{{.StructName}}{{.MethodName}}Stmt) Exec(ctx context.Context, {{.Arg.Pair}}) ({{.Ret.Type}}, error) {
	row := s.stmt.QueryRowContext(ctx, {{.Arg.Params}})
	var {{.Ret.Name}} {{.Ret.Type}}
	err := row.Scan({{.Ret.Scan}})
	return {{.Ret.Name}}, err
}

func (q *{{.StructName}}) Prepare{{.MethodName}}(ctx context.Context) (*{{.StructName}}{{.MethodName}}Stmt, error) {
	stmt, err := q.db.PrepareContext(ctx, {{.ConstantName}})
	if err != nil {
		return nil, err
	}
	return &{{.StructName}}{{.MethodName}}Stmt{stmt: stmt}, nil
}
{{- end}}
{{end}}

{{if eq .Cmd ":many"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *{{.StructName}}) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}) ([]{{.Ret.Type}}, error) {
	rows, err := q.db.QueryContext(ctx, {{.ConstantName}}, {{.Arg.Params}})
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	{{- if $.EmitEmptySlices}}
	items := []{{.Ret.Type}}{}
	{{else}}
	var items []{{.Ret.Type}}
	{{end -}}
	for rows.Next() {
		var {{.Ret.Name}} {{.Ret.Type}}
		if err := rows.Scan({{.Ret.Scan}}); err != nil {
			return nil, err
		}
		items = append(items, {{.Ret.Name}})
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
{{- if $.EmitPreparedQueries}}

type {{.StructName}}{{.MethodName}}Stmt struct {
	stmt *sql.Stmt
}

func (s *{{.StructName}}{{.MethodName}}Stmt) Close() error {
	return s.stmt.Close()
}

func (s *{{.StructName}}{{.MethodName}}Stmt) JoinTx(ctx context.Context, tx *sql.Tx) *{{.StructName}}{{.MethodName}}Stmt {
	stmt := tx.StmtContext(ctx, s.stmt)
	return &{{.StructName}}{{.MethodName}}Stmt{stmt: stmt}
}

func (s *{{.StructName}}{{.MethodName}}Stmt) Exec(ctx context.Context, {{.Arg.Pair}}) ([]{{.Ret.Type}}, error) {
	rows, err := s.stmt.QueryContext(ctx, {{.Arg.Params}})
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	{{- if $.EmitEmptySlices}}
	items := []{{.Ret.Type}}{}
	{{else}}
	var items []{{.Ret.Type}}
	{{end -}}
	for rows.Next() {
		var {{.Ret.Name}} {{.Ret.Type}}
		if err := rows.Scan({{.Ret.Scan}}); err != nil {
			return nil, err
		}
		items = append(items, {{.Ret.Name}})
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

func (q *{{.StructName}}) Prepare{{.MethodName}}(ctx context.Context) (*{{.StructName}}{{.MethodName}}Stmt, error) {
	stmt, err := q.db.PrepareContext(ctx, {{.ConstantName}})
	if err != nil {
		return nil, err
	}
	return &{{.StructName}}{{.MethodName}}Stmt{stmt: stmt}, nil
}
{{- end}}
{{end}}

{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *{{.StructName}}) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}) error {
	_, err := q.db.ExecContext(ctx, {{.ConstantName}}, {{.Arg.Params}})
	return err
}
{{- if $.EmitPreparedQueries}}

type {{.StructName}}{{.MethodName}}Stmt struct {
	stmt *sql.Stmt
}

func (s *{{.StructName}}{{.MethodName}}Stmt) Close() error {
	return s.stmt.Close()
}

func (s *{{.StructName}}{{.MethodName}}Stmt) JoinTx(ctx context.Context, tx *sql.Tx) *{{.StructName}}{{.MethodName}}Stmt {
	stmt := tx.StmtContext(ctx, s.stmt)
	return &{{.StructName}}{{.MethodName}}Stmt{stmt: stmt}
}

func (s *{{.StructName}}{{.MethodName}}Stmt) Exec(ctx context.Context, {{.Arg.Pair}}) error {
	_, err := s.stmt.ExecContext(ctx, {{.Arg.Params}})
	return err
}

func (q *{{.StructName}}) Prepare{{.MethodName}}(ctx context.Context) (*{{.StructName}}{{.MethodName}}Stmt, error) {
	stmt, err := q.db.PrepareContext(ctx, {{.ConstantName}})
	if err != nil {
		return nil, err
	}
	return &{{.StructName}}{{.MethodName}}Stmt{stmt: stmt}, nil
}
{{- end}}
{{end}}

{{if eq .Cmd ":execrows"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *{{.StructName}}) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}) (int64, error) {
	result, err := q.db.ExecContext(ctx, {{.ConstantName}}, {{.Arg.Params}})
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
{{- if $.EmitPreparedQueries}}

type {{.StructName}}{{.MethodName}}Stmt struct {
	stmt *sql.Stmt
}

func (s *{{.StructName}}{{.MethodName}}Stmt) Close() error {
	return s.stmt.Close()
}

func (s *{{.StructName}}{{.MethodName}}Stmt) JoinTx(ctx context.Context, tx *sql.Tx) *{{.StructName}}{{.MethodName}}Stmt {
	stmt := tx.StmtContext(ctx, s.stmt)
	return &{{.StructName}}{{.MethodName}}Stmt{stmt: stmt}
}

func (s *{{.StructName}}{{.MethodName}}Stmt) Exec(ctx context.Context, {{.Arg.Pair}}) (int64, error) {
	result, err := s.stmt.ExecContext(ctx, {{.Arg.Params}})
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

func (q *{{.StructName}}) Prepare{{.MethodName}}(ctx context.Context) (*{{.StructName}}{{.MethodName}}Stmt, error) {
	stmt, err := q.db.PrepareContext(ctx, {{.ConstantName}})
	if err != nil {
		return nil, err
	}
	return &{{.StructName}}{{.MethodName}}Stmt{stmt: stmt}, nil
}
{{- end}}
{{end}}

{{if eq .Cmd ":execresult"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *{{.StructName}}) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}) (sql.Result, error) {
	return q.db.ExecContext(ctx, {{.ConstantName}}, {{.Arg.Params}})
}
{{- if $.EmitPreparedQueries}}

type {{.StructName}}{{.MethodName}}Stmt struct {
	stmt *sql.Stmt
}

func (s *{{.StructName}}{{.MethodName}}Stmt) Close() error {
	return s.stmt.Close()
}

func (s *{{.StructName}}{{.MethodName}}Stmt) JoinTx(ctx context.Context, tx *sql.Tx) *{{.StructName}}{{.MethodName}}Stmt {
	stmt := tx.StmtContext(ctx, s.stmt)
	return &{{.StructName}}{{.MethodName}}Stmt{stmt: stmt}
}

func (s *{{.StructName}}{{.MethodName}}Stmt) Exec(ctx context.Context, {{.Arg.Pair}}) (sql.Result, error) {
	return s.stmt.ExecContext(ctx, {{.Arg.Params}})
}

func (q *{{.StructName}}) Prepare{{.MethodName}}(ctx context.Context) (*{{.StructName}}{{.MethodName}}Stmt, error) {
	stmt, err := q.db.PrepareContext(ctx, {{.ConstantName}})
	if err != nil {
		return nil, err
	}
	return &{{.StructName}}{{.MethodName}}Stmt{stmt: stmt}, nil
}
{{- end}}
{{end}}
{{end}}
{{end}}
{{end}}
`
