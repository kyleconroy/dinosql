{{define "preexec"}}
    {{- if .Arg.Struct }}
    queryParams := []interface{}{ {{.Arg.Params}} }
    {{- $arg := .Arg }}
    curNumb := {{ $arg.SqlcDynamic }}
    {{- range .Arg.Struct.Fields }}
    {{- if .HasSqlcDynamic }}
        replaceText, args := {{$arg.VariableForField .}}.ToSql(curNumb)
        curNumb += len(args)
        query = strings.ReplaceAll(query, "/*DYNAMIC:{{.Column.Name}}*/$1", replaceText)
        queryParams = append(queryParams, args...)
    {{- end}}
    {{- end}}
    {{- else}}
    replaceText, args := {{.Arg.Column.Name}}.ToSql(1)
    query = strings.ReplaceAll(query, "/*DYNAMIC:{{.Arg.Column.Name}}*/$1", replaceText)
    {{- end}}
{{- end}}

{{define "queryCodePgx"}}
{{range .GoQueries}}
{{if $.OutputQuery .SourceName}}
{{if and (ne .Cmd ":copyfrom") (ne (hasPrefix .Cmd ":batch") true)}}
const {{.ConstantName}} = {{$.Q}}-- name: {{.MethodName}} {{.Cmd}}
{{escape .SQL}}
{{$.Q}}
{{end}}

{{if ne (hasPrefix .Cmd ":batch") true}}
{{if .Arg.EmitStruct}}
type {{.Arg.Type}} struct { {{- range .Arg.Struct.Fields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}

{{if .Ret.EmitStruct}}
type {{.Ret.Type}} struct { {{- range .Ret.Struct.Fields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}
{{end}}

{{if eq .Cmd ":one"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if $.EmitMethodsWithDBArgument -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) ({{.Ret.DefineType}}, error) {
    {{- if .Arg.HasSqlcDynamic }} 
    {{- template "preexec" .}}
	row := db.QueryRow(ctx, query, queryParams...)
    {{- else}}
	row := db.QueryRow(ctx, {{.ConstantName}}, {{.Arg.Params}})
    {{- end}}
{{- else -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}) ({{.Ret.DefineType}}, error) {
     {{- if .Arg.HasSqlcDynamic }} 
    {{- template "preexec" .}}
	row := q.db.QueryRow(ctx, query, queryParams...)
    {{- else}}
	row := q.db.QueryRow(ctx, {{.ConstantName}}, {{.Arg.Params}})
    {{- end}}
{{- end}}
	{{- if or (ne .Arg.Pair .Ret.Pair) (ne .Arg.DefineType .Ret.DefineType) }}
	var {{.Ret.Name}} {{.Ret.Type}}
	{{- end}}
	err := row.Scan({{.Ret.Scan}})
	return {{.Ret.ReturnName}}, err
}
{{end}}

{{if eq .Cmd ":many"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if $.EmitMethodsWithDBArgument -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) ([]{{.Ret.DefineType}}, error) {
    {{- if .Arg.HasSqlcDynamic }} 
    {{- template "preexec" .}}
	rows, err := db.Query(ctx, query, queryParams...)
    {{- else}}
	rows, err := db.Query(ctx, {{.ConstantName}}, {{.Arg.Params}})
    {{- end}}
{{- else -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}) ([]{{.Ret.DefineType}}, error) {
    {{- if .Arg.HasSqlcDynamic }} 
    {{- template "preexec" .}}
	rows, err := q.db.Query(ctx, query, queryParams...)
    {{- else}}
	rows, err := q.db.Query(ctx, {{.ConstantName}}, {{.Arg.Params}})
    {{- end}}
{{- end}}
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	{{- if $.EmitEmptySlices}}
	items := []{{.Ret.DefineType}}{}
	{{else}}
	var items []{{.Ret.DefineType}}
	{{end -}}
	for rows.Next() {
		var {{.Ret.Name}} {{.Ret.Type}}
		if err := rows.Scan({{.Ret.Scan}}); err != nil {
			return nil, err
		}
		items = append(items, {{.Ret.ReturnName}})
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
{{end}}

{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if $.EmitMethodsWithDBArgument -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) error {
    {{- if .Arg.HasSqlcDynamic }} 
    {{- template "preexec" .}}
	_, err := db.Exec(ctx, query, queryParams...)
    {{- else}}
	_, err := db.Exec(ctx, {{.ConstantName}}, {{.Arg.Params}})
    {{- end}}
{{- else -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}) error {
    {{- if .Arg.HasSqlcDynamic }} 
    {{- template "preexec" .}}
	_, err := q.db.Exec(ctx, query, queryParams...)
    {{- else}}
	_, err := q.db.Exec(ctx, {{.ConstantName}}, {{.Arg.Params}})
    {{- end}}
{{- end}}
	return err
}
{{end}}

{{if eq .Cmd ":execrows"}}
{{range .Comments}}//{{.}}
{{end -}}
{{if $.EmitMethodsWithDBArgument -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) (int64, error) {
    {{- if .Arg.HasSqlcDynamic }} 
    {{- template "preexec" .}}
	result, err := db.Exec(ctx, query, queryParams...)
    {{- else}}
	result, err := db.Exec(ctx, {{.ConstantName}}, {{.Arg.Params}})
    {{- end}}
{{- else -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}) (int64, error) {
    {{- if .Arg.HasSqlcDynamic }} 
    {{- template "preexec" .}}
	result, err := q.db.Exec(ctx, query, queryParams...)
    {{- else}}
	result, err := q.db.Exec(ctx, {{.ConstantName}}, {{.Arg.Params}})
    {{- end}}
{{- end}}
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
{{end}}

{{if eq .Cmd ":execresult"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if $.EmitMethodsWithDBArgument -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) (pgconn.CommandTag, error) {
    {{- if .Arg.HasSqlcDynamic }} 
    {{- template "preexec" .}}
	return db.Exec(ctx, query, queryParams...)
    {{- else}}
	return db.Exec(ctx, {{.ConstantName}}, {{.Arg.Params}})
    {{- end}}
{{- else -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}) (pgconn.CommandTag, error) {
    {{- if .Arg.HasSqlcDynamic }} 
    {{- template "preexec" .}}
	return q.db.Exec(ctx, query, queryParams...)
    {{- else}}
	return q.db.Exec(ctx, {{.ConstantName}}, {{.Arg.Params}})
    {{- end}}
{{- end}}
}
{{end}}


{{end}}
{{end}}
{{end}}

