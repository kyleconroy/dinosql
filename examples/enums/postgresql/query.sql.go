// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: query.sql

package enums

import (
	"context"
)

const listUsers = `-- name: ListUsers :many
SELECT id, first_name, last_name, age, shirt_size FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Age,
			&i.ShirtSize,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByShirtSizes = `-- name: ListUsersByShirtSizes :many
SELECT id, first_name, last_name, age, shirt_size FROM users
WHERE shirt_size = ANY($1::size[])
`

func (q *Queries) ListUsersByShirtSizes(ctx context.Context, shirtSize []Size) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsersByShirtSizes, shirtSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Age,
			&i.ShirtSize,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userCreate = `-- name: UserCreate :exec
INSERT INTO users (first_name, last_name, age, shirt_size)
VALUES ($1, $2, $3, $4)
`

type UserCreateParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Age       int32  `json:"age"`
	ShirtSize Size   `json:"shirt_size"`
}

func (q *Queries) UserCreate(ctx context.Context, arg UserCreateParams) error {
	_, err := q.db.Exec(ctx, userCreate,
		arg.FirstName,
		arg.LastName,
		arg.Age,
		arg.ShirtSize,
	)
	return err
}
