// Code generated by sqlc. DO NOT EDIT.
// source: books.sql

package pggroupiface

import (
	"context"
	"time"

	"github.com/lib/pq"
)

type Books interface {
	Create(ctx context.Context, arg BooksCreateParams) (Book, error)
	Delete(ctx context.Context, bookID int32) error
	Get(ctx context.Context, bookID int32) (Book, error)
	ListByTags(ctx context.Context, dollar_1 []string) ([]BooksListByTagsRow, error)
	ListByTitleYear(ctx context.Context, arg BooksListByTitleYearParams) ([]Book, error)
	Update(ctx context.Context, arg BooksUpdateParams) error
	UpdateISBN(ctx context.Context, arg BooksUpdateISBNParams) error
}

func NewBooks(db DBTX) Books {
	return &books{db: db}
}

type books struct {
	db DBTX
}

const booksCreate = `-- name: Create :one
INSERT INTO books (
    author_id,
    isbn,
    book_type,
    title,
    year,
    available,
    tags
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
RETURNING book_id, author_id, isbn, book_type, title, year, available, tags
`

type BooksCreateParams struct {
	AuthorID  int32
	Isbn      string
	BookType  BookType
	Title     string
	Year      int32
	Available time.Time
	Tags      []string
}

func (q *books) Create(ctx context.Context, arg BooksCreateParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, booksCreate,
		arg.AuthorID,
		arg.Isbn,
		arg.BookType,
		arg.Title,
		arg.Year,
		arg.Available,
		pq.Array(arg.Tags),
	)
	var i Book
	err := row.Scan(
		&i.BookID,
		&i.AuthorID,
		&i.Isbn,
		&i.BookType,
		&i.Title,
		&i.Year,
		&i.Available,
		pq.Array(&i.Tags),
	)
	return i, err
}

const booksDelete = `-- name: Delete :exec
DELETE FROM books
WHERE book_id = $1
`

func (q *books) Delete(ctx context.Context, bookID int32) error {
	_, err := q.db.ExecContext(ctx, booksDelete, bookID)
	return err
}

const booksGet = `-- name: Get :one
SELECT book_id, author_id, isbn, book_type, title, year, available, tags FROM books
WHERE book_id = $1
`

func (q *books) Get(ctx context.Context, bookID int32) (Book, error) {
	row := q.db.QueryRowContext(ctx, booksGet, bookID)
	var i Book
	err := row.Scan(
		&i.BookID,
		&i.AuthorID,
		&i.Isbn,
		&i.BookType,
		&i.Title,
		&i.Year,
		&i.Available,
		pq.Array(&i.Tags),
	)
	return i, err
}

const booksListByTags = `-- name: ListByTags :many
SELECT 
  book_id,
  title,
  name,
  isbn,
  tags
FROM books
LEFT JOIN authors ON books.author_id = authors.author_id
WHERE tags && $1::varchar[]
`

type BooksListByTagsRow struct {
	BookID int32
	Title  string
	Name   string
	Isbn   string
	Tags   []string
}

func (q *books) ListByTags(ctx context.Context, dollar_1 []string) ([]BooksListByTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, booksListByTags, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BooksListByTagsRow{}
	for rows.Next() {
		var i BooksListByTagsRow
		if err := rows.Scan(
			&i.BookID,
			&i.Title,
			&i.Name,
			&i.Isbn,
			pq.Array(&i.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const booksListByTitleYear = `-- name: ListByTitleYear :many
SELECT book_id, author_id, isbn, book_type, title, year, available, tags FROM books
WHERE title = $1 AND year = $2
`

type BooksListByTitleYearParams struct {
	Title string
	Year  int32
}

func (q *books) ListByTitleYear(ctx context.Context, arg BooksListByTitleYearParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, booksListByTitleYear, arg.Title, arg.Year)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.BookID,
			&i.AuthorID,
			&i.Isbn,
			&i.BookType,
			&i.Title,
			&i.Year,
			&i.Available,
			pq.Array(&i.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const booksUpdate = `-- name: Update :exec
UPDATE books
SET title = $1, tags = $2
WHERE book_id = $3
`

type BooksUpdateParams struct {
	Title  string
	Tags   []string
	BookID int32
}

func (q *books) Update(ctx context.Context, arg BooksUpdateParams) error {
	_, err := q.db.ExecContext(ctx, booksUpdate, arg.Title, pq.Array(arg.Tags), arg.BookID)
	return err
}

const booksUpdateISBN = `-- name: UpdateISBN :exec
UPDATE books
SET title = $1, tags = $2, isbn = $4
WHERE book_id = $3
`

type BooksUpdateISBNParams struct {
	Title  string
	Tags   []string
	BookID int32
	Isbn   string
}

func (q *books) UpdateISBN(ctx context.Context, arg BooksUpdateISBNParams) error {
	_, err := q.db.ExecContext(ctx, booksUpdateISBN,
		arg.Title,
		pq.Array(arg.Tags),
		arg.BookID,
		arg.Isbn,
	)
	return err
}
