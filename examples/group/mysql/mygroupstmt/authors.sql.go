// Code generated by sqlc. DO NOT EDIT.
// source: authors.sql

package mygroupstmt

import (
	"context"
	"database/sql"
)

type Authors struct {
	db DBTX
}

func NewAuthors(db DBTX) *Authors {
	return &Authors{db: db}
}

const authorsCreate = `-- name: Create :execresult
INSERT INTO authors (name) VALUES (?)
`

func (q *Authors) Create(ctx context.Context, name string) (sql.Result, error) {
	return q.db.ExecContext(ctx, authorsCreate, name)
}

type AuthorsCreateStmt struct {
	stmt *sql.Stmt
}

func (s *AuthorsCreateStmt) Close() error {
	return s.stmt.Close()
}

func (s *AuthorsCreateStmt) JoinTx(ctx context.Context, tx *sql.Tx) *AuthorsCreateStmt {
	stmt := tx.StmtContext(ctx, s.stmt)
	return &AuthorsCreateStmt{stmt: stmt}
}

func (s *AuthorsCreateStmt) Exec(ctx context.Context, name string) (sql.Result, error) {
	return s.stmt.ExecContext(ctx, name)
}

func (q *Authors) PrepareCreate(ctx context.Context) (*AuthorsCreateStmt, error) {
	stmt, err := q.db.PrepareContext(ctx, authorsCreate)
	if err != nil {
		return nil, err
	}
	return &AuthorsCreateStmt{stmt: stmt}, nil
}

const authorsGet = `-- name: Get :one
SELECT author_id, name FROM authors
WHERE author_id = ?
`

func (q *Authors) Get(ctx context.Context, authorID int32) (Author, error) {
	row := q.db.QueryRowContext(ctx, authorsGet, authorID)
	var i Author
	err := row.Scan(&i.AuthorID, &i.Name)
	return i, err
}

type AuthorsGetStmt struct {
	stmt *sql.Stmt
}

func (s *AuthorsGetStmt) Close() error {
	return s.stmt.Close()
}

func (s *AuthorsGetStmt) JoinTx(ctx context.Context, tx *sql.Tx) *AuthorsGetStmt {
	stmt := tx.StmtContext(ctx, s.stmt)
	return &AuthorsGetStmt{stmt: stmt}
}

func (s *AuthorsGetStmt) Exec(ctx context.Context, authorID int32) (Author, error) {
	row := s.stmt.QueryRowContext(ctx, authorID)
	var i Author
	err := row.Scan(&i.AuthorID, &i.Name)
	return i, err
}

func (q *Authors) PrepareGet(ctx context.Context) (*AuthorsGetStmt, error) {
	stmt, err := q.db.PrepareContext(ctx, authorsGet)
	if err != nil {
		return nil, err
	}
	return &AuthorsGetStmt{stmt: stmt}, nil
}
