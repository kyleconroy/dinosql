// Code generated by sqlc. DO NOT EDIT.
// source: authors.sql

package mygroupiface

import (
	"context"
	"database/sql"
)

type Authors interface {
	Create(ctx context.Context, name string) (sql.Result, error)
	Get(ctx context.Context, authorID int32) (Author, error)
}

func NewAuthors(db DBTX) Authors {
	return &authors{db: db}
}

type authors struct {
	db DBTX
}

const authorsCreate = `-- name: Create :execresult
INSERT INTO authors (name) VALUES (?)
`

func (q *authors) Create(ctx context.Context, name string) (sql.Result, error) {
	return q.db.ExecContext(ctx, authorsCreate, name)
}

const authorsGet = `-- name: Get :one
SELECT author_id, name FROM authors
WHERE author_id = ?
`

func (q *authors) Get(ctx context.Context, authorID int32) (Author, error) {
	row := q.db.QueryRowContext(ctx, authorsGet, authorID)
	var i Author
	err := row.Scan(&i.AuthorID, &i.Name)
	return i, err
}
