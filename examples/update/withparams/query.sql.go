// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package update

import (
	"context"
	"database/sql"
	"time"
)

const createAuthor = `-- name: CreateAuthor :execresult
INSERT INTO
  authors (name, deleted_at, updated_at)
VALUES
  (?, ?, ?)
`

type CreateAuthorParams struct {
	Name      string
	DeletedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAuthor, arg.Name, arg.DeletedAt, arg.UpdatedAt)
}

const createBook = `-- name: CreateBook :execresult
INSERT INTO
  books (is_amazing)
VALUES
  (?)
`

func (q *Queries) CreateBook(ctx context.Context, isAmazing bool) (sql.Result, error) {
	return q.db.ExecContext(ctx, createBook, isAmazing)
}

const deleteAuthor = `-- name: DeleteAuthor :exec
UPDATE
  authors,
  books
SET
  authors.deleted_at = now(),
  authors.updated_at = now()
WHERE
  books.is_amazing = 1
  AND authors.name = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, name)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT
  id, name, deleted_at, updated_at
FROM
  authors
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetAuthor(ctx context.Context, id int64) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, id)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DeletedAt,
		&i.UpdatedAt,
	)
	return i, err
}
